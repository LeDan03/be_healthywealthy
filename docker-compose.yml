version: '3.8'
services:
  elasticsearch:
    image: custom-elasticsearch:8.14.3
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    image: mysql:8.0
    container_name: mysql
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: account_db
    ports:
      - "3306:3306"
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p1234"]
      interval: 5s
      timeout: 5s
      retries: 20

  redis:
      image: redis:7.0
      container_name: redis
      command: ["redis-server", "--appendonly", "yes"]
      ports:
        - "6379:6379"
      volumes:
        - redis_data:/data
      restart: always
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 5s
        timeout: 3s
        retries: 5
      networks:
        - mynetwork
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - mynetwork
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  kafka-server:
    image: bitnami/kafka:3.4
    container_name: kafka-server
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=INTERNAL://:9092,EXTERNAL://:9093
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka-server:9092,EXTERNAL://localhost:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_NUM_PARTITIONS=3
      - KAFKA_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    networks:
      - mynetwork
    volumes:
      - kafka_data:/bitnami/kafka
    restart: always

  eureka-server:
    build:
      context: ./EurekaServer
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - mynetwork
    depends_on:
      elasticsearch:
        condition: service_healthy
      mysql:
        condition: service_healthy

  api-gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
    networks:
      - mynetwork
    restart: always

  account-service:
    build:
      context: .
      dockerfile: ./AccountService/Dockerfile
    container_name: account-service
    ports:
      - "8081:8081"
    depends_on:
      eureka-server:
        condition: service_started
      mysql:
        condition: service_healthy
      kafka-server:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - mynetwork
    restart: always

  analytics-service:
    build:
      context: .
      dockerfile: ./AnalyticsService/Dockerfile
    container_name: analytics-service
    ports:
      - "8083:8083"
    depends_on:
      eureka-server:
        condition: service_started
      mysql:
        condition: service_healthy
      kafka-server:
        condition: service_started
      redis:
        condition: service_started
    networks:
      - mynetwork
    restart: always

  recipe-service:
    build:
      context: .
      dockerfile: ./RecipeService/Dockerfile
    container_name: recipe-service
    ports:
      - "8082:8082"
    depends_on:
      elasticsearch:
        condition: service_healthy
      eureka-server:
        condition: service_started
      mysql:
        condition: service_healthy
      kafka-server:
        condition: service_started
    networks:
      - mynetwork
    restart: always

networks:
  mynetwork:
    driver: bridge

volumes:
  es-data:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  mysql_data:
    driver: local
  redis_data:
    driver: local